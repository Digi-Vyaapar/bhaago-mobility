# Sample workflow for building and deploying a Next.js site to GitHub Pages
#
# To get started with Next.js see: https://nextjs.org/docs/getting-started
#
name: Deploy Next.js site to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Detect package manager
        id: detect-package-manager
        run: |
          if [ -f "${{ github.workspace }}/yarn.lock" ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
            echo "command=install" >> $GITHUB_OUTPUT
            echo "runner=yarn" >> $GITHUB_OUTPUT
            exit 0
          elif [ -f "${{ github.workspace }}/package.json" ]; then
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "command=ci" >> $GITHUB_OUTPUT
            echo "runner=npx --no-install" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "Unable to determine package manager"
            exit 1
          fi
      
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: ${{ steps.detect-package-manager.outputs.manager }}
      
      - name: Setup Pages
        uses: actions/configure-pages@v5
        with:
          # Automatically inject basePath in your Next.js configuration file and disable
          # server side image optimization (https://nextjs.org/docs/api-reference/next/image#unoptimized).
          #
          # You may remove this line if you want to manage the configuration yourself.
          static_site_generator: next
      
      # Custom step to dynamically update next.config.mjs
      - name: Update Next.js config for GitHub Pages
        run: |
          # Check if next.config.mjs exists, if not create it
          if [ ! -f "next.config.mjs" ]; then
            echo "Creating next.config.mjs file"
            echo "export default {};" > next.config.mjs
          fi
          
          # Update next.config.mjs with dynamic basePath configuration
          cat > next.config.tmp.mjs << 'EOL'
          // next.config.mjs
          const isGithubActions = process.env.GITHUB_ACTIONS || false;
          let basePath = '';
          
          if (isGithubActions) {
            // Trim the repo name from the GITHUB_REPOSITORY env var
            const repo = process.env.GITHUB_REPOSITORY.replace(/.*?\//, '');
            basePath = `/${repo}`;
          }
          
          // Merge with existing config from the original next.config.mjs
          import { createRequire } from 'module';
          import { fileURLToPath } from 'url';
          import { dirname } from 'path';
          import fs from 'fs';
          
          const __filename = fileURLToPath(import.meta.url);
          const __dirname = dirname(__filename);
          
          let existingConfig = {};
          try {
            const configContent = fs.readFileSync('next.config.mjs', 'utf8');
            // Extract the configuration object from the file
            const match = configContent.match(/export\s+default\s+(?:defineConfig\()?({[\s\S]*})(?:\))?;?/);
            if (match && match[1]) {
              const configStr = match[1].replace(/(\w+):/g, '"$1":').replace(/,\s*}/g, '}');
              existingConfig = JSON.parse(configStr);
            }
          } catch (e) {
            console.log('Could not parse existing config, using defaults');
          }
          
          export default {
            ...existingConfig,
            basePath,
            output: 'export',
            images: {
              unoptimized: true,
            },
          };
          EOL
          
          mv next.config.tmp.mjs next.config.mjs
          cat next.config.mjs
      
      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: |
            .next/cache
          # Generate a new cache whenever packages or source files change.
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-
      
      - name: Install dependencies
        run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}
      
      - name: Build with Next.js
        run: ${{ steps.detect-package-manager.outputs.runner }} next build
      
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./out

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
